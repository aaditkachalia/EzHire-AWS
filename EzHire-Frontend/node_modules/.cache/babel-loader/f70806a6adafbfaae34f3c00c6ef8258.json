{"ast":null,"code":"import _classCallCheck from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/aadit/Desktop/Final Year/Code/EzHire2020/src/views/ChatBot/ChatBot.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport logo from \"logo.svg\"; //import { Socket } from 'react-socket-io';\n\nimport openSocket from \"socket.io-client\";\nimport io from \"socket.io-client\";\nimport bgimage from \"./background.jpg\";\nimport history from \"history.js\";\nimport Config from \"../../Config.js\";\nvar uri = Config.serverurl;\nvar options = {\n  transports: ['websocket']\n};\nvar sectionStyle = {\n  width: \"100%\",\n  backgroundImage: \"url(\" + bgimage + \")\"\n}; //const socket = openSocket('http://127.0.0.1:5000',options);\n\nvar Chatbot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chatbot, _Component);\n\n  function Chatbot(props) {\n    var _this;\n\n    _classCallCheck(this, Chatbot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chatbot).call(this, props));\n\n    _this.Interviewstart = function () {\n      alert(\"insideclick\");\n\n      _this.setState({\n        isStart: true\n      });\n    };\n\n    _this.initSocket = function () {\n      var socket = io(uri);\n      socket.on('connect', function () {});\n\n      _this.setState({\n        socket: socket\n      });\n    };\n\n    _this.handleNewUserMessage = function (newMessage) {\n      var counter = 0;\n      var data = {\n        \"message\": newMessage,\n        \"cid\": _this.state.cid,\n        \"intid\": _this.state.loc,\n        \"user\": _this.state.user\n      };\n\n      _this.state.socket.emit(\"message\", data);\n\n      _this.state.socket.on(\"after-long-process\", function (res) {\n        //const response = this.state;\n        _this.setState({\n          response: res['mess']\n        });\n\n        if (counter == 0) {\n          addResponseMessage(res['mess']);\n          counter = counter + 1;\n\n          if (res['mess'] == 'Thank you!') {\n            var socket = io(uri);\n            socket.on('disconnect', function () {});\n            alert(\"You have successfully completed your interview!\");\n            history.push('/admin/pastinterview');\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      socket: null,\n      response: false,\n      isStart: false,\n      loc: _this.props.location.state.key,\n      cid: _this.props.location.state.cid,\n      ispublic: _this.props.location.state.ispublic,\n      user: localStorage.getItem('user_id')\n    };\n    return _this;\n  }\n\n  _createClass(Chatbot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.initSocket();\n      addResponseMessage(\"Welcome to Ezhire! Your interview is about to begin. Are you ready?\"); //user=localStorage.getItem('user_id')\n\n      var data1 = {\n        \"interviewid\": this.state.loc,\n        \"user\": this.state.user,\n        \"cname\": this.state.cid,\n        \"ispublic\": this.state.ispublic\n      };\n      fetch(Config.serverurl + \"/finishinterview\", {\n        method: 'POST',\n        body: JSON.stringify(data1)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        _this2.setState({\n          isStart: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isStart) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: bgimage,\n          width: \"900px\",\n          height: \"auto\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), React.createElement(Widget, {\n          handleNewUserMessage: this.handleNewUserMessage,\n          profileAvatar: logo,\n          title: \"InterviewScreen\",\n          subtitle: \"You know you can do this\",\n          fullScreenMode: false //showCloseButton={true}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \" Click on the icon below to start the interview, Once you start it there is no going back my friend! \"));\n      }\n    }\n  }]);\n\n  return Chatbot;\n}(Component);\n\nexport default Chatbot;","map":{"version":3,"sources":["/Users/aadit/Desktop/Final Year/Code/EzHire2020/src/views/ChatBot/ChatBot.js"],"names":["React","Component","Link","Widget","addResponseMessage","addLinkSnippet","addUserMessage","openSocket","io","bgimage","history","Config","uri","serverurl","options","transports","sectionStyle","width","backgroundImage","Chatbot","props","Interviewstart","alert","setState","isStart","initSocket","socket","on","handleNewUserMessage","newMessage","counter","data","state","cid","loc","user","emit","res","response","push","location","key","ispublic","localStorage","getItem","data1","fetch","method","body","JSON","stringify","then","json","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport logo from 'logo.svg';\n//import { Socket } from 'react-socket-io';\nimport openSocket from \"socket.io-client\";\nimport io from \"socket.io-client\";\nimport bgimage from \"./background.jpg\"\nimport history from \"history.js\"\nimport Config from \"../../Config.js\"\nconst uri = Config.serverurl;\nconst options = { transports: ['websocket'] };\nvar sectionStyle = {\n  width: \"100%\",\n  backgroundImage: \"url(\"+ bgimage + \")\"\n};\n\n//const socket = openSocket('http://127.0.0.1:5000',options);\n\nclass Chatbot extends Component{\n\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tsocket:null,\n\t\t\tresponse: false,\n      isStart : false,\n      loc: this.props.location.state.key,\n      cid:this.props.location.state.cid,\n      ispublic:this.props.location.state.ispublic,\n      user : localStorage.getItem('user_id')\n\t\t};\n\t}\n\n  Interviewstart = () => {\n    alert(\"insideclick\")\n    this.setState({isStart:true});\n  }\n\n\tcomponentDidMount() {\n\t\tthis.initSocket()\n    addResponseMessage(\"Welcome to Ezhire! Your interview is about to begin. Are you ready?\");\n    //user=localStorage.getItem('user_id')\n    var data1 ={\"interviewid\": this.state.loc, \"user\" : this.state.user, \"cname\" : this.state.cid, \"ispublic\":this.state.ispublic}\n    fetch(Config.serverurl+\"/finishinterview\",{\n        method:'POST',\n    body:JSON.stringify(data1),\n      })\n      .then(res => res.json())\n      .then(res =>{\n      this.setState({isStart:true})\n})\n  }\n\n\n  initSocket = ()=>{\n  \tconst socket = io(uri)\n  \tsocket.on('connect',()=>{\n  \t})\n  \tthis.setState({socket})\n  }\n  handleNewUserMessage = (newMessage) => {\n  \tlet counter=0\n    const data={\"message\":newMessage, \"cid\" : this.state.cid, \"intid\" : this.state.loc, \"user\" : this.state.user}\n    this.state.socket.emit(\"message\", data)\n    \n    this.state.socket.on(\"after-long-process\",  (res) => {\n    \t//const response = this.state;\n\n    \tthis.setState({response:res['mess']})\n    if(counter==0){\n    \taddResponseMessage(res['mess'])\n    \tcounter= counter+1\n      if(res['mess'] =='Thank you!'){\n      let socket=io(uri)\n      socket.on('disconnect',()=>{\n      })\n      alert(\"You have successfully completed your interview!\")\n      history.push('/admin/pastinterview')\n    }\n    }\n\n     })\n\n  }\nrender(){\n  if(this.state.isStart){\n\treturn(\n  \n\t\t<div className=\"App\">\n    <img src={bgimage} width=\"900px\" height=\"auto\"/>\n        <Widget\n          handleNewUserMessage={this.handleNewUserMessage}\n          profileAvatar={logo}\n          title=\"InterviewScreen\"\n          subtitle=\"You know you can do this\"\n          fullScreenMode={false}\n\n          //showCloseButton={true}\n        />\n      </div>\n      );\n    }\n    else{\n      return(\n        <div className=\"App\">\n        <h1> Click on the icon below to start the interview, Once you start it there is no going back my friend! </h1>\n      </div>\n\n      );\n    }\n}\n}\nexport default Chatbot;"]},"metadata":{},"sourceType":"module"}