{"ast":null,"code":"import _slicedToArray from \"/Users/aadit/.config/yarn/global/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/aadit/Desktop/Final Year/Code/EzHire2020/src/views/CandidateResult/CandidateResult.js\";\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport CandCard from \"./CandCard.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport ReactLoading from 'react-loading';\nimport Config from \"../../Config.js\";\nimport Auth from \"../../Auth.js\";\nexport default function CandidateResult() {\n  Auth();\n  var location = useLocation();\n  var interviewname;\n  var interviewid;\n  var companyid;\n  var candetails;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isloaded = _React$useState2[0],\n      setLoad = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isfetch = _React$useState4[0],\n      setFetch = _React$useState4[1];\n\n  function fetchcall() {\n    alert(isfetch);\n\n    if (isfetch) {\n      setFetch(false);\n    } else {\n      setFetch(true);\n    }\n\n    alert(isfetch);\n    alert(isfetch);\n  }\n\n  if (location.state) {\n    interviewname = location.state.name;\n    interviewid = location.state.cid;\n    companyid = location.state.cname;\n    var data = {\n      \"interviewid\": interviewid,\n      \"companyid\": companyid\n    };\n    fetch(Config.serverurl + \"/candidateresult\", {\n      method: 'POST',\n      body: JSON.stringify(data)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      localStorage.setItem(\"candetails\", JSON.stringify(res));\n      setLoad(true);\n      data = \"\";\n    });\n\n    if (isloaded) {\n      candetails = localStorage.getItem('candetails');\n      candetails = JSON.parse(candetails);\n\n      if (Object.entries(candetails).length != 0) {\n        candetails = Object.entries(candetails).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          return React.createElement(CandCard, {\n            key: key,\n            fname: value.firstName,\n            lname: value.lastName,\n            email: value.email,\n            aboutme: value.aboutMe,\n            cid: companyid,\n            intid: interviewid,\n            user: key,\n            fetch: fetchcall,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          });\n        });\n      } else {\n        candetails = \"No candidate has yet appeared for the interview!\";\n      }\n\n      return React.createElement(GridContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, candetails);\n    } else {\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ReactLoading, {\n        type: 'cylon',\n        color: 'skyblue',\n        height: '18%',\n        width: '25%',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }));\n    }\n  } else {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Please select interview from Your Interviews to check the results \");\n  }\n}","map":{"version":3,"sources":["/Users/aadit/Desktop/Final Year/Code/EzHire2020/src/views/CandidateResult/CandidateResult.js"],"names":["React","useLocation","CandCard","GridContainer","ReactLoading","Config","Auth","CandidateResult","location","interviewname","interviewid","companyid","candetails","useState","isloaded","setLoad","isfetch","setFetch","fetchcall","alert","state","name","cid","cname","data","fetch","serverurl","method","body","JSON","stringify","then","res","json","localStorage","setItem","getItem","parse","Object","entries","length","map","key","value","firstName","lastName","email","aboutMe","display","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { useLocation } from \"react-router-dom\";\nimport CandCard from \"./CandCard.js\"\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport ReactLoading from 'react-loading';\nimport Config from \"../../Config.js\"\nimport Auth from \"../../Auth.js\"\n\nexport default function CandidateResult(){\nAuth()\nlet location = useLocation();\nlet interviewname\nlet interviewid\nlet companyid\nlet candetails\nconst [isloaded, setLoad] = React.useState(false)\nconst [isfetch, setFetch] = React.useState(true)\n\nfunction fetchcall(){\n\talert(isfetch)\n\tif(isfetch){\n\tsetFetch(false)\n}\n\telse{\n\t\tsetFetch(true)\n\t}\n\n\talert(isfetch)\n\talert(isfetch)\n}\n\nif(location.state){\n\t\tinterviewname = location.state.name\n\t\tinterviewid = location.state.cid\n\t\tcompanyid = location.state.cname\n\t\tvar data ={\"interviewid\": interviewid, \"companyid\" : companyid}\n\t\tfetch(Config.serverurl+\"/candidateresult\",{\n        method:'POST',\n\t\tbody:JSON.stringify(data),\n      })\n      .then(res => res.json())\n      .then(res =>{\n\t\tlocalStorage.setItem(\"candetails\",JSON.stringify(res))\n\n\t\tsetLoad(true)\n\t\tdata=\"\"\n})\nif(isloaded){\ncandetails=localStorage.getItem('candetails')\ncandetails=JSON.parse(candetails)\nif(Object.entries(candetails).length!= 0){\ncandetails=Object.entries(candetails).map(([key, value]) => {\n\n        return (\n            <CandCard key={key} fname={value.firstName} lname={value.lastName} email={value.email} aboutme={value.aboutMe} cid={companyid} intid={interviewid} user={key} fetch={fetchcall}/>\n        )\n    })\n}\nelse{\n\tcandetails=\"No candidate has yet appeared for the interview!\"\n}\n\nreturn(\n\t<GridContainer>\n\t{candetails}\n\t</GridContainer>\n\t)\n}\nelse{\n\treturn(\n\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t<ReactLoading type={'cylon'} color={'skyblue'} height={'18%'} width={'25%'} />\n\t<br />\n\t</div>\n\t)\n}\n}\nelse{\n\treturn(\n\t<h3>Please select interview from Your Interviews to check the results </h3>\n\t)\n}\n}\n"]},"metadata":{},"sourceType":"module"}